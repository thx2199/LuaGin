#!/usr/bin/env lua

local Gin = require 'gin.core.gin'
local help_description = [[GIN v]] .. Gin.version .. [[, a JSON-API web framework.

Usage: gin COMMAND [ARGS] [OPTIONS]

The available gin commands are:
 new [name][dbuser][dbpass][dbname][options] Create a new Gin application, dbuser, dbpass, dbname are optional.
 start                     Starts the Gin server
 stop                      Stops the Gin server
 console                   Start a Gin console
 generate migration [name] Create a new migration (name is optional)
 generate controller <name> Create a new controller
 generate model <name> [--only]    Create a new model,name is plural.if --only is set,only create model file
 migrate                   Run all migrations that have not been run
 migrate rollback          Rollback one migration

Options:
 --trace                   Shows additional logs
]]

local launcher = require 'gin.cli.launcher'
local application = require 'gin.cli.application'
local migrations = require 'gin.cli.migrations'
local console = require 'gin.cli.console'
local model_factory = require 'gin.cli.model_factory'

-- check trace
Gin.settings.trace = false
if arg[#arg] == '--trace' then
  table.remove(arg, #arg)
  Gin.settings.trace = true
end

-- check args
if arg[1] == 'new' and arg[2] then
  application.new(arg[2], arg[3], arg[4], arg[5])
elseif arg[1] == 'start' then
  launcher.start(arg[2]) -- arg[2] is optional,for cors flag. gin start --cors
elseif arg[1] == 'stop' then
  launcher.stop()
elseif (arg[1] == 'generate' or arg[1] == 'g') and arg[2] == 'migration' then
  migrations.new(arg[3])
elseif (arg[1] == 'generate' or arg[1] == 'g') and arg[2] == 'model' then
  model_factory.new(arg[3])
elseif arg[1] == 'del' and arg[2] == 'model' then
  model_factory.delete(arg[3])
elseif arg[1] == 'migrate' and arg[2] == nil then
  migrations.up()
elseif arg[1] == 'migrate' and arg[2] == "rollback" then
  migrations.down()
elseif arg[1] == 'console' or arg[1] == 'c' then
  console.start()
else
  print(help_description)
end
